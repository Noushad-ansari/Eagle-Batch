> ✅React Intro
<✅folder structure
>✅Hello world in react
✅Imperative (vanilla js) & declarative (React js)
>✅components in react
>✅functional comp{
        stateless component /dumb 
        functional is a just a function that return a jsx
        
}
>✅class comp{

}

>✅jsx - {
        it must have only one parent element
        it should have only one when you return jsx from function or class component
instead of putting JavaScript into HTML,
JSX allows us to put HTML into JavaScript.
JSX stands for JavaScript XML. 
It is simply a syntax extension of React. 
It allows us to directly write HTML in React.

}
>✅React without JSX
>✅props
>✅state
>✅Destructure props & state
>✅setState


>✅Events Handling in functional and class component
>✅Events Bindings
>✅Pass Method as props

>✅Conditional Rendering
 a.if/else
 b.element variable
 c.Ternary Conditional
 d.short circuit operator
 
 
>✅List Rendering
>✅list with keys
>✅Styling
        Regular
        inline
        internal
        eternal
        style component
>Form Handling
 controlled and uncontrolled Components

>✅ React Life Cycle Mehtods
    a.Mounting
        i.constructor
                (1.called whenever new component is created)
                (2. Initializing state)
                (3. binding The event handlers)
                (4.super(props) directly overwrite this.state)
                (5. Do not cause side effect eg: http request)

        ii.static getDerivedStateFromProps(prevProps,preState)
                (1. when the state of the component depends on changes in props & state over time)
                (2.Set the state)
                (3. Do not cause side effect eg: http request)

        iii.Render
                (1.Only required method)
                (2.Read props & state and return JSX)
                (3. Do not cause side effect eg: http request)
                (4. Children component lifecycle mehtods are also excuted)
        iv. componentDidMount
                (1.Called only only once in whole lifecycle mehtods)
                (2. Invoked immediately after a components and all its children components have been rendered to the DOM)
                (1.Cause side effect. Ex Interact with the DOM or perform any ajax calls to load data.)

    b.Updating
        i.static getDerivedStateFromProps(props,state)
                (1.Method is called every time component re rendered)
                (2.Set the state)
                (3. Do not cause side effect eg: http request)
        ii.shouldComponentUpdate(nextProps,nextState)
                (1.Dictated if the component should re-rendered or not)
                (2.Performance optimization)
                (3. Do not cause side effect eg: http request)
                (4. Return true or false on the basis of newProps and new state)
        iii.render
        iv.getSnapshotBeforeUpdate(prevProps,preState)
                (1.Called right before the changes from the virtual DOM are to be reflected in the DOM)
                (2.Capture some information from the DOM)             
                (3.Method will either return null or return a value. 
                Returned value will be passed as the third parameter to the next method )           
        v.componentDidUpdate(preProps,prevState,snapShopt)
                (1.Called after the render is finished in the re-render cycles_
                (2.called side effects)

    c.Unmounting
        componentDidUnMount()
               (1.Method is invoked immediately before a component is unmounted and destroyed)
               (2.Cancelling any network requests, removing event handlers, cancelling any subscriptions and also invalidating timers)

    d.Error Handling
        i.static getDerivedStateFromError(error)
        ii.componentDidCatch(err,info)

React Routing
        Congigur Routes
        Navigating on buttton click
        Navigating programmatically (useNavigate)
        nested Routes
        dynamic Routes
        Route parameter
        Lazy loading
       

Pure Component
React memo
Refs
http request
axios
useEffect

Context Api
useReducer
useContext
useRef
useMemo






